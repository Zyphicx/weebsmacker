
==================== FINAL INTERFACE ====================
2018-08-03 19:27:31.5782089 UTC

interface main:Main 8043
  interface hash: 22425b2a3bb767c5d2a46b0918aaedf6
  ABI hash: 0e5b4aeb393b7e5576e9234bcdaf11a6
  export-list hash: 1301ae2223a9e049c84d1eb5df456d79
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0964264324226933c266cbcfa654fca0
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.timeElapsed
  Main.updateTimeRef
module dependencies: Animation Backend Constants Game Rendering
                     Types
package dependencies: GLFW-b-3.2.1.0 GLURaw-2.0.0.4 GLUT-2.7.0.13
                      ObjectName-1.1.0.1 OpenGL-3.0.2.1 OpenGLRaw-3.3.0.2
                      StateVar-1.1.1.0 Win32-2.6.1.0 array-0.5.2.0 base-4.11.1.0
                      binary-0.8.5.1 bindings-GLFW-3.2.1.1 bmp-1.2.6.3
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 gloss-1.12.0.0
                      gloss-rendering-1.12.0.0 half-0.3 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 random-1.1 stm-2.4.5.0 template-haskell-2.13.0.0
                      text-1.2.3.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         GLFW-b-3.2.1.0:Graphics.UI.GLFW.Types base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: GLFW-b-3.2.1.0:Graphics.UI.GLFW.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type half-0.3:Numeric.Half
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text
import  -/  GLFW-b-3.2.1.0:Graphics.UI.GLFW 86f3667524073c1d9547e4e903e843d3
import  -/  base-4.11.1.0:Control.Concurrent 32d4ec781fcaef03ee60d1b53e92df48
import  -/  base-4.11.1.0:Control.Monad 60c7bc648329161549cea9b9658c9b81
import  -/  base-4.11.1.0:Data.Function 80e4d03eeed24407b53db03220e6e19e
import  -/  base-4.11.1.0:Data.IORef db943da5202fc47692e1628fd4b21ba8
import  -/  base-4.11.1.0:Data.Tuple bfd15ca14ee9b1b9cd782c618946afb4
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Conc.IO fec493d80eb1c452c87a67f28d56a328
import  -/  base-4.11.1.0:GHC.IORef 6d762a6aaf8860274df765e407eb7682
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  gloss-1.12.0.0:Graphics.Gloss.Data.Picture 40e4525670fd0abee94036db3229b6e0
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Internals.Rendering.State 5f9d262e35c6aba78381f6256663c1f6
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Rendering 026d7bd046eb98a4722e052bf570e078
import  -/  Animation a0589f07b40fc2c8a775945ce88f6ae7
  exports: 6543d9d5ebec830fa338b6781dc8a9be
  updateAnimationStages e444bb62d9988af51016677dbc3b209d
import  -/  Backend 9488b82f69ddb635cddf7fc16c1247f6
  exports: a8f6cdf08c5ac5ce5631fb25b8df8421
  handleEvents f1a437efca6e9fb97ee2567816f8962c
  loadAssets fea04f3ac79f42568e681508ecab43c3
  withWindow 7855a4e1ad2cea5b26b2df482535a542
import  -/  Constants 916c21825e88169b843e7af4cf9b1bda
  exports: 65df7f5b0b18332b03cc258368944848
  fps 8f2bb909692c254e0f26f55d79144af5
  gameHeight 0a0aef2e876feca61928f7c7b58e6c7a
  gameWidth 84f9e13caf1361ab16282de7acb40794
  initGameState a2535d22d253fdd70e4bd59c635f0d3d
import  -/  Game 8184afe2209d52cd04f13120161eeb91
  exports: 45f892a25dcf16424d8ef4034e5cac79
  updateGameState d76543809bd290a04560acf8a657466f
import  -/  Rendering 3094e3ff93f91889736fe9e2b9f67d80
  exports: cad63247223a447efd45968ea628d943
  renderFrame 3a4f3cdda117b4a987e5e10bef277d2e
import  -/  Types 86017bc6ec9258d54a2cd0a7197d3a23
  exports: cdab6bcc0f25b78227451b5170314fa3
  gameEnded 4b258a32ea66243b92437ea70cfe13af
import  -/  random-1.1:System.Random cf743494f6d6907bf2f14dbc9174bff3
import  -/  time-1.8.0.2:Data.Time.Clock 76440c4737e8185bc6b1842c7242fac7
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.NominalDiffTime 4fbecbab02a5f9e6a8299a15b23e2e5f
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff a53f4c27602ec1af62acded34a703501
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime fa8ce49cdde43864272e247ad2c07474
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 06b390070acc8b07289f18f60e901739
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
63d80c0c223e6fa8de658d34c3a325d0
  $wtimeElapsed ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld Data.Time.Clock.Internal.UTCTime.UTCTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld Data.Time.Clock.Internal.UTCTime.UTCTime)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        4#
                        w of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv1
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 let {
                   ret :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                 } in
                 case {__pkg_ccall_GC Win32-2.6.1.0 GHC.Prim.Addr#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ret
                        ipv2 of wild { Unit# ds ->
                 case GHC.Prim.readWord32OffAddr#
                        @ GHC.Prim.RealWorld
                        ret
                        0#
                        ds of ds1 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readWord32OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# ret 4#)
                        0#
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.UnliftedRep
                        @ GHC.Prim.ByteArray#
                        ipv3
                        ipv6 of s4 { DEFAULT ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Data.Time.Clock.Internal.UTCTime.UTCTime
                        ww
                        s4 of ds4 { (#,#) ipv11 ipv12 ->
                 (# ipv11,
                    let {
                      x# :: GHC.Prim.Word#
                      = GHC.Prim.minusWord#
                          (GHC.Prim.or# ipv5 (GHC.Prim.uncheckedShiftL# ipv7 32#))
                          116444736000000000##
                    } in
                    case Data.Time.Clock.System.$wsystemToUTCTime
                           (GHC.Prim.word2Int# (GHC.Prim.quotWord# x# 10000000##))
                           (GHC.Prim.narrow32Word#
                              (GHC.Prim.timesWord#
                                 (GHC.Prim.narrow32Word# (GHC.Prim.remWord# x# 10000000##))
                                 100##)) of ww3 { (#,#) ww4 ww5 ->
                    case ipv12 of ww1 { Data.Time.Clock.Internal.UTCTime.UTCTime ww2 ww6 ->
                    (Data.Time.Clock.Internal.UTCDiff.$wdiffUTCTime ww4 ww5 ww2 ww6)
                      `cast`
                    (Sym (Data.Fixed.N:Fixed[0]
                              <Data.Fixed.E12>_P) ; Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0])) } } #) } } } } } } }) -}
7483830ac1ee17f4cc94c0cdcf15b6e4
  $wupdateTimeRef ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld Data.Time.Clock.Internal.UTCTime.UTCTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld Data.Time.Clock.Internal.UTCTime.UTCTime)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        4#
                        w of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv1
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 let {
                   ret :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                 } in
                 case {__pkg_ccall_GC Win32-2.6.1.0 GHC.Prim.Addr#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ret
                        ipv2 of wild { Unit# ds ->
                 case GHC.Prim.readWord32OffAddr#
                        @ GHC.Prim.RealWorld
                        ret
                        0#
                        ds of ds1 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readWord32OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# ret 4#)
                        0#
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.UnliftedRep
                        @ GHC.Prim.ByteArray#
                        ipv3
                        ipv6 of s4 { DEFAULT ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ Data.Time.Clock.Internal.UTCTime.UTCTime
                        ww
                        (let {
                           x# :: GHC.Prim.Word#
                           = GHC.Prim.minusWord#
                               (GHC.Prim.or# ipv5 (GHC.Prim.uncheckedShiftL# ipv7 32#))
                               116444736000000000##
                         } in
                         case Data.Time.Clock.System.$wsystemToUTCTime
                                (GHC.Prim.word2Int# (GHC.Prim.quotWord# x# 10000000##))
                                (GHC.Prim.narrow32Word#
                                   (GHC.Prim.timesWord#
                                      (GHC.Prim.narrow32Word# (GHC.Prim.remWord# x# 10000000##))
                                      100##)) of ww3 { (#,#) ww4 ww5 ->
                         Data.Time.Clock.Internal.UTCTime.UTCTime ww4 ww5 })
                        s4 of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } } } } }) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
0424d1a3a877cf57ce74402b0e9fe252
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a084f0b7fa35ad96e048b205f21fdb06
  timeElapsed ::
    GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime
    -> GHC.Types.IO
         Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.timeElapsed1
                  `cast`
                (<GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime>_R)) -}
b06cd0618241300ba2ed42c9c1740eea
  timeElapsed1 ::
    GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <Data.Time.Clock.Internal.UTCTime.UTCTime>_N) of ww { GHC.STRef.STRef ww1 ->
                 Main.$wtimeElapsed ww1 w1 }) -}
9dfa39fc5386e171ff53b177c317ff12
  updateTimeRef ::
    GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime
    -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.updateTimeRef1
                  `cast`
                (<GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
21a2e958673e856b975295924faf1d5e
  updateTimeRef1 ::
    GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.IORef.IORef Data.Time.Clock.Internal.UTCTime.UTCTime)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <Data.Time.Clock.Internal.UTCTime.UTCTime>_N) of ww { GHC.STRef.STRef ww1 ->
                 Main.$wupdateTimeRef ww1 w1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

