
==================== FINAL INTERFACE ====================
2018-08-03 18:59:35.8072069 UTC

interface main:Rendering 8043
  interface hash: 570db903d0a1353de9d495e322d948ef
  ABI hash: 3094e3ff93f91889736fe9e2b9f67d80
  export-list hash: cad63247223a447efd45968ea628d943
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05a7dfc725707cda3dfdbf87b0f28b5d
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Rendering.char2Sprite
  Rendering.difficulty2Sprite
  Rendering.firstFrame
  Rendering.getTorbHammer
  Rendering.number2Picture
  Rendering.playerPicture
  Rendering.renderFrame
  Rendering.showDifficulty
  Rendering.showHearts
  Rendering.showPoints
  Rendering.sprite2Picture
  Rendering.spriteHeight
  Rendering.toDegrees
  Rendering.translateHammer
  Rendering.weebPictures
module dependencies: Constants Game Types
package dependencies: GLFW-b-3.2.1.0 GLURaw-2.0.0.4 GLUT-2.7.0.13
                      ObjectName-1.1.0.1 OpenGL-3.0.2.1 OpenGLRaw-3.3.0.2
                      StateVar-1.1.1.0 Win32-2.6.1.0 array-0.5.2.0 base-4.11.1.0
                      binary-0.8.5.1 bindings-GLFW-3.2.1.1 bmp-1.2.6.3
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 gloss-1.12.0.0
                      gloss-rendering-1.12.0.0 half-0.3 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 random-1.1 stm-2.4.5.0 template-haskell-2.13.0.0
                      text-1.2.3.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         GLFW-b-3.2.1.0:Graphics.UI.GLFW.Types base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: GLFW-b-3.2.1.0:Graphics.UI.GLFW.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type half-0.3:Numeric.Half
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text
import  -/  GLFW-b-3.2.1.0:Graphics.UI.GLFW 86f3667524073c1d9547e4e903e843d3
import  -/  GLFW-b-3.2.1.0:Graphics.UI.GLFW.Types 9cda662418961203831abeb5efb31d4a
import  -/  base-4.11.1.0:Data.Traversable 6506d675f7e45edd6c22add801f79ba8
import  -/  base-4.11.1.0:Data.Tuple bfd15ca14ee9b1b9cd782c618946afb4
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Float 99ddb84df6cc12bd84829dd8cd755ac2
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  gloss-1.12.0.0:Graphics.Gloss.Data.Color 02769df076d68aba30b7383a3a7c9fb9
import  -/  gloss-1.12.0.0:Graphics.Gloss.Data.Picture 40e4525670fd0abee94036db3229b6e0
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Internals.Data.Picture ecb1ccb6474f00909fc4dc64349e5f2c
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Internals.Rendering.State 5f9d262e35c6aba78381f6256663c1f6
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Rendering 026d7bd046eb98a4722e052bf570e078
import  -/  Constants 916c21825e88169b843e7af4cf9b1bda
  exports: 65df7f5b0b18332b03cc258368944848
  adjustX 390b6d293418279ae88f66b36d094f93
  adjustY 65f26df9315351a6fd363b808b596710
  difficultyHeight ab06a36b087cf8adae7e9664f3b4b31c
  digitHeight d9ce2918c8dd54e794170b71d16cff1c
  digitWidth 7e923cfd6d0e815aa5ccae2c22bb3800
  gameHeight 0a0aef2e876feca61928f7c7b58e6c7a
  gameWidth 84f9e13caf1361ab16282de7acb40794
  hammerMaxAngle 08621ff3c6bcf13e1d8293d0954ef330
  heartHeight d321d4f41f0c02e23f106f54b2995fdb
  heartWidth 2a59a1c83b70fce9ab1f1305aa4e444d
  torbHeight 852d004d27d98d8cb995d46e8f36f75f
  torbSpriteHeight 4bf137c23dc1cae4c53dcce94dbca3ba
import  -/  Game 8184afe2209d52cd04f13120161eeb91
  exports: 45f892a25dcf16424d8ef4034e5cac79
  hammerPosition e87a88ae82a9dde0821b1bb4011f0382
import  -/  Types 86017bc6ec9258d54a2cd0a7197d3a23
  exports: cdab6bcc0f25b78227451b5170314fa3
  Animation 0690d0591eba0306c5f32cae73fc8df3
  Dead 2968a2da35f480f29cd886c13234fbfa
  Difficulty 7014142eceb4aa55045f9bb68a5a975e
  Easy a156c75960fecb2ae14e822ee6568842
  Extreme 7c4ee4080d02968c9cb6c76190b6b297
  Falling 619681807eacf04e928f1106bed9fb23
  GameState 4b258a32ea66243b92437ea70cfe13af
  Hard 2a6a17865eb3d8742f468179779eea51
  Left 17e26f6d5a819f27499ac1bb0cc50ed2
  Medium e97833f130d702f00eb3eb2397cd5f17
  Normal 75ca1702131f69c51d4c32ca05d1bf4d
  Right 063d8a9f293b2a1f3101c191e7e8d893
  Running 9a2da9b7b7feb1b4117b6f178b8c090f
  Sounds 0d0772e8efebb462dcd67887b31ea04a
  Sprite 5e801e70a2b188833d6ae57f75783970
  Sprite 05cab5d6798e3cc2e13737e788324609
  Sprites 47a9f17b7173d851a6d4f4f2e7a93020
  Still 5033b4c73e618e49a26d0883046f95eb
  Weeb 10967d5f016769bc8650f1b639037bd1
  animation 3860cdc8ce3a18e2c97d80b31e2bdf29
  difficulty 4b258a32ea66243b92437ea70cfe13af
  digit0 47a9f17b7173d851a6d4f4f2e7a93020
  digit1 47a9f17b7173d851a6d4f4f2e7a93020
  digit2 47a9f17b7173d851a6d4f4f2e7a93020
  digit3 47a9f17b7173d851a6d4f4f2e7a93020
  digit4 47a9f17b7173d851a6d4f4f2e7a93020
  digit5 47a9f17b7173d851a6d4f4f2e7a93020
  digit6 47a9f17b7173d851a6d4f4f2e7a93020
  digit7 47a9f17b7173d851a6d4f4f2e7a93020
  digit8 47a9f17b7173d851a6d4f4f2e7a93020
  digit9 47a9f17b7173d851a6d4f4f2e7a93020
  garbageGenjis 47a9f17b7173d851a6d4f4f2e7a93020
  hammerAngle 4b258a32ea66243b92437ea70cfe13af
  heart 47a9f17b7173d851a6d4f4f2e7a93020
  lives 4b258a32ea66243b92437ea70cfe13af
  noodleMunchinNarutos 47a9f17b7173d851a6d4f4f2e7a93020
  player 4b258a32ea66243b92437ea70cfe13af
  playerAction 3860cdc8ce3a18e2c97d80b31e2bdf29
  playerFacing 3860cdc8ce3a18e2c97d80b31e2bdf29
  playerPos 3860cdc8ce3a18e2c97d80b31e2bdf29
  points 4b258a32ea66243b92437ea70cfe13af
  shittyShimadas 47a9f17b7173d851a6d4f4f2e7a93020
  torbHammerLeft 47a9f17b7173d851a6d4f4f2e7a93020
  torbHammerRight 47a9f17b7173d851a6d4f4f2e7a93020
  torbStillLeft 47a9f17b7173d851a6d4f4f2e7a93020
  torbStillRight 47a9f17b7173d851a6d4f4f2e7a93020
  weakWeebs 47a9f17b7173d851a6d4f4f2e7a93020
  weebAction 70757ca2726e50931866d5492951c3eb
  weebAnimation 70757ca2726e50931866d5492951c3eb
  weebs 4b258a32ea66243b92437ea70cfe13af
c12206480aa22679a14fd2b124f59b06
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Rendering.$trModule3
                   Rendering.$trModule1) -}
f6048da066cd99202e7620705e368eeb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rendering.$trModule2) -}
192ee3ce05dbb5d4d9017920db52c653
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rendering"#) -}
3e4869f7c4ed9f233c16b4110d4f8ae6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rendering.$trModule4) -}
b238bc64e058214e27a926afcf18c905
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7fc5f63d30b2316c32feec182540c532
  $wnumber2Picture ::
    Types.Sprites
    -> GHC.Types.Int
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),A,A,A,A)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Types.Sprites) (w1 :: GHC.Types.Int) ->
                 (# case w1 of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    letrec {
                      $wgo :: [GHC.Types.Char]
                              -> GHC.Types.Float
                              -> (# GHC.Types.Float,
                                    [Graphics.Gloss.Internals.Data.Picture.Picture] #)
                        {- Arity: 2, Strictness: <S,1*U><L,U(U)>, Inline: [0] -}
                      = \ (w2 :: [GHC.Types.Char]) (w3 :: GHC.Types.Float) ->
                        case w2 of wild {
                          []
                          -> (# w3,
                                GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture #)
                          : y ys
                          -> let {
                               ds1 :: (GHC.Types.Float,
                                       [Graphics.Gloss.Internals.Data.Picture.Picture])
                               = case $wgo
                                        ys
                                        (case w3 of wild1 { GHC.Types.F# x ->
                                         GHC.Types.F#
                                           (GHC.Prim.plusFloat# x 1.0#) }) of ww { (#,#) ww1 ww8 ->
                                 (ww1, ww8) }
                             } in
                             (# case ds1 of wild1 { (,) s'' y1 -> s'' },
                                GHC.Types.:
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  (Graphics.Gloss.Internals.Data.Picture.Translate
                                     (case w3 of wild1 { GHC.Types.F# x ->
                                      GHC.Types.F# (GHC.Prim.timesFloat# x 30.0#) })
                                     Rendering.number2Picture1
                                     (case Rendering.char2Sprite
                                             w
                                             y of wild1 { Types.Sprite ds sprite ->
                                      case ds of wild2 { (,) sWidth sHeight ->
                                      Graphics.Gloss.Internals.Data.Picture.Translate
                                        (case sWidth of wild3 { GHC.Types.F# x ->
                                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                                        (case sHeight of wild3 { GHC.Types.F# x ->
                                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                                        sprite } }))
                                  (case ds1 of wild1 { (,) s'' y1 -> y1 }) #) }
                    } in
                    case $wgo
                           (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                           Rendering.number2Picture1 of ww { (#,#) ww1 ww8 ->
                    ww8 } } } #)) -}
b18b59dc13ed56a286a55a1edc86a6b6
  $wplayerPicture ::
    Types.Sprites
    -> Types.Action
    -> (Types.Action, Types.Animation)
    -> (# GHC.Types.Float, GHC.Types.Float,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(1*U(1*U(U),1*U(U)),U),1*U(1*U(1*U(U),1*U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,1*U(A,1*U)>,
     Inline: [0],
     Unfolding: (\ (w :: Types.Sprites)
                   (ww :: Types.Action)
                   (ww1 :: (Types.Action, Types.Animation)) ->
                 case ww of wild {
                   DEFAULT
                   -> case ww1 of wild1 { (,) ds1 y ->
                      case y of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Types.Float, GHC.Types.Float,
                                     Graphics.Gloss.Internals.Data.Picture.Picture #)
                           of {}
                        : x ds2
                        -> case x of wild3 { (,) x1 ds3 ->
                           case x1 of wild4 { Types.Sprite ds sprite ->
                           case ds of wild5 { (,) sWidth sHeight ->
                           (# case sWidth of wild6 { GHC.Types.F# x2 ->
                              GHC.Types.F# (GHC.Prim.divideFloat# x2 2.0#) },
                              case sHeight of wild6 { GHC.Types.F# x2 ->
                              GHC.Types.F# (GHC.Prim.divideFloat# x2 2.0#) },
                              sprite #) } } } } }
                   Types.Still ds
                   -> case ds of wild1 {
                        Types.Left
                        -> case w of wild2 { Types.Sprites ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                           case ds2 of wild3 { Types.Sprite ds37 sprite ->
                           case ds37 of wild4 { (,) sWidth sHeight ->
                           (# case sWidth of wild5 { GHC.Types.F# x ->
                              GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) },
                              case sHeight of wild5 { GHC.Types.F# x ->
                              GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) },
                              sprite #) } } }
                        Types.Right
                        -> case w of wild2 { Types.Sprites ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                           case ds1 of wild3 { Types.Sprite ds37 sprite ->
                           case ds37 of wild4 { (,) sWidth sHeight ->
                           (# case sWidth of wild5 { GHC.Types.F# x ->
                              GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) },
                              case sHeight of wild5 { GHC.Types.F# x ->
                              GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) },
                              sprite #) } } } } }) -}
bf4ebc59e10cb0e285492c1b125db0a7
  $wrenderFrame ::
    GHC.Prim.Addr#
    -> Graphics.Gloss.Internals.Rendering.State.State
    -> Types.Sprites
    -> Types.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,U><L,U(U,U,U,U,U)><L,U(U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,U(U(U(U),U(U)),U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U))><L,U(U(U(U(U),U(U)),A,U,A,U,U(A,U)),U,U(U),A,A,A,U(U),U(U),U,A,A,A)><S,U>,
     Inline: [0] -}
85c904a774c9032a6360c74867c33dac
  $wshowHearts ::
    Types.Sprites
    -> Types.GameState
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(1*U(1*U(U),1*U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: Types.Sprites) (w1 :: Types.GameState) ->
                 (# case w1 of wild { Types.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                    case ds8 of wild1 { GHC.Types.I# i ->
                    let {
                      heartPic :: Graphics.Gloss.Internals.Data.Picture.Picture
                      = case w of wild2 { Types.Sprites ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds13 ds14 ds15 ds28 ds29 ds30 ds31 ds32 ds33 ds34 ds35 ds36 ds37 ds38 ds39 ds40 ds41 ds42 ds43 ->
                        case ds29 of wild3 { Types.Sprite ds sprite ->
                        case ds of wild4 { (,) sWidth sHeight ->
                        Graphics.Gloss.Internals.Data.Picture.Translate
                          (case sWidth of wild5 { GHC.Types.F# x ->
                           GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                          (case sHeight of wild5 { GHC.Types.F# x ->
                           GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                          sprite } } }
                    } in
                    letrec {
                      $wheartList :: GHC.Prim.Float#
                                     -> [Graphics.Gloss.Internals.Data.Picture.Picture]
                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                      = \ (ww :: GHC.Prim.Float#) ->
                        case GHC.Prim.eqFloat# ww 0.0# of lwild {
                          DEFAULT
                          -> case GHC.Prim.gtFloat# ww 0.0# of lwild1 {
                               DEFAULT
                               -> GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture
                               1#
                               -> GHC.Types.:
                                    @ Graphics.Gloss.Internals.Data.Picture.Picture
                                    (Graphics.Gloss.Internals.Data.Picture.Translate
                                       (GHC.Types.F# (GHC.Prim.timesFloat# 40.0# ww))
                                       Rendering.number2Picture1
                                       heartPic)
                                    ($wheartList (GHC.Prim.minusFloat# ww 1.0#)) }
                          1#
                          -> GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture }
                    } in
                    $wheartList (GHC.Prim.int2Float# i) } } #)) -}
168aceb6f31a0c3ea762db9469021925
  $wtranslateHammer ::
    Types.GameState
    -> Graphics.Gloss.Internals.Data.Picture.Picture
    -> (# GHC.Types.Float, GHC.Types.Float,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),U(U)),A,U,A,A,A),A,U(U),A,A,A,A,A,A,A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Types.GameState)
                   (w1 :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 let {
                   p :: (GHC.Types.Float, GHC.Types.Float)
                   = case Game.$whammerPosition w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# case p of wild { (,) x ds -> x },
                    case p of wild { (,) ds y -> y },
                    Graphics.Gloss.Internals.Data.Picture.Rotate
                      (case w of wild { Types.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                       case ds1 of wild1 { Types.Player ds16 ds17 ds18 ds19 ds20 ds21 ->
                       case ds18 of wild2 {
                         Types.Left
                         -> case ds3 of wild3 { GHC.Types.F# x ->
                            case Constants.hammerMaxAngle of wild4 { GHC.Types.F# y ->
                            GHC.Types.F#
                              (GHC.Prim.divideFloat#
                                 (GHC.Prim.timesFloat# (GHC.Prim.minusFloat# x y) 180.0#)
                                 3.1415927#) } }
                         Types.Right
                         -> case Constants.hammerMaxAngle of wild3 { GHC.Types.F# x ->
                            case ds3 of wild4 { GHC.Types.F# y ->
                            GHC.Types.F#
                              (GHC.Prim.divideFloat#
                                 (GHC.Prim.timesFloat# (GHC.Prim.minusFloat# x y) 180.0#)
                                 3.1415927#) } } } } })
                      w1 #)) -}
d8b187c349bb15d2877aff3a0ca7de65
  char2Sprite :: Types.Sprites -> GHC.Types.Char -> Types.Sprite
  {- Arity: 2,
     Strictness: <S,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U),A,A,A,A)><S(S),1*U(1*U)>m,
     Unfolding: (\ (sprites :: Types.Sprites) (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT -> Rendering.char2Sprite1
                   '0'# -> Types.digit0 sprites
                   '1'# -> Types.digit1 sprites
                   '2'# -> Types.digit2 sprites
                   '3'# -> Types.digit3 sprites
                   '4'# -> Types.digit4 sprites
                   '5'# -> Types.digit5 sprites
                   '6'# -> Types.digit6 sprites
                   '7'# -> Types.digit7 sprites
                   '8'# -> Types.digit8 sprites
                   '9'# -> Types.digit9 sprites } }) -}
7cfa773adae85c66b78cea8e858440a1
  char2Sprite1 :: Types.Sprite
  {- Strictness: x -}
d276ff4d8a5b62e678d2bb26a9ecc7a1
  difficulty2Sprite ::
    Types.Sprites -> Types.Difficulty -> Types.Sprite
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U),1*U(U,U),1*U(U,U),1*U(U,U))><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Sprites) (w1 :: Types.Difficulty) ->
                 case w of ww { Types.Sprites ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case w1 of wild {
                   Types.Easy -> ww28
                   Types.Medium -> ww29
                   Types.Hard -> ww30
                   Types.Extreme -> ww31 } }) -}
c3f2ee9a97d9a4a7c4b665d6d4a0e612
  firstFrame :: (a, Types.Animation) -> Types.Sprite
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: (a, [(Types.Sprite, GHC.Types.Float)])) ->
                 case x of wild { (,) ds1 y ->
                 case y of wild1 {
                   [] -> case GHC.List.badHead ret_ty Types.Sprite of {}
                   : x1 ds2 -> case x1 of wild2 { (,) x2 ds3 -> x2 } } }) -}
01a7df88182003e492c7258be3583276
  getTorbHammer :: Types.Sprites -> Types.GameState -> Types.Sprite
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,A,1*U(U,U),1*U(U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(S(LLSLLL)LLLLLLLLLLL),1*U(1*U(A,A,1*U,A,A,A),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (sprites :: Types.Sprites) (state :: Types.GameState) ->
                 case state of wild { Types.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 case ds1 of wild1 { Types.Player ds16 ds17 ds18 ds19 ds20 ds21 ->
                 case ds18 of wild2 {
                   Types.Left -> Types.torbHammerLeft sprites
                   Types.Right -> Types.torbHammerRight sprites } } }) -}
12b411797c586f7dea0137917fe8c762
  number2Picture ::
    Types.Sprites
    -> GHC.Types.Int -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),A,A,A,A)><L,1*U(U)>m14,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Sprites) (w1 :: GHC.Types.Int) ->
                 case Rendering.$wnumber2Picture w w1 of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
f06eab36fa074e23e75348380d3edb94
  number2Picture1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
a27c64be4aec18528996fa6bc4d49985
  playerPicture ::
    Types.Sprites
    -> Types.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2,
     Strictness: <L,1*U(1*U(1*U(1*U(U),1*U(U)),U),1*U(1*U(1*U(U),1*U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(S(LLLLSL)LLLLLLLLLLL),1*U(1*U(A,A,A,A,1*U,1*U(A,1*U)),A,A,A,A,A,A,A,A,A,A,A)>m11,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Sprites) (w1 :: Types.GameState) ->
                 case w1 of ww { Types.GameState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww1 of ww13 { Types.Player ww14 ww15 ww16 ww17 ww18 ww19 ->
                 case Rendering.$wplayerPicture
                        w
                        ww18
                        ww19 of ww20 { (#,,#) ww21 ww22 ww23 ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   ww21
                   ww22
                   ww23 } } }) -}
3a4f3cdda117b4a987e5e10bef277d2e
  renderFrame ::
    Graphics.UI.GLFW.Types.Window
    -> Graphics.Gloss.Internals.Rendering.State.State
    -> (Types.Sounds, Types.Sprites)
    -> Types.GameState
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><L,U(U,U,U,U,U)><S,1*U(A,U(U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,U(U(U(U),U(U)),U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U)))><L,U(U(U(U(U),U(U)),A,U,A,U,U(A,U)),U,U(U),A,A,A,U(U),U(U),U,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Rendering.renderFrame1
                  `cast`
                (<Graphics.UI.GLFW.Types.Window>_R
                 ->_R <Graphics.Gloss.Internals.Rendering.State.State>_R
                 ->_R <(Types.Sounds, Types.Sprites)>_R
                 ->_R <Types.GameState>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c5642c0bd13eadfaed6915894a2989be
  renderFrame1 ::
    Graphics.UI.GLFW.Types.Window
    -> Graphics.Gloss.Internals.Rendering.State.State
    -> (Types.Sounds, Types.Sprites)
    -> Types.GameState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><L,U(U,U,U,U,U)><S,1*U(A,U(U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,U(U(U(U),U(U)),U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U),U(U(U(U),U(U)),U)))><L,U(U(U(U(U),U(U)),A,U,A,U,U(A,U)),U,U(U),A,A,A,U(U),U(U),U,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Graphics.UI.GLFW.Types.Window)
                   (w1 :: Graphics.Gloss.Internals.Rendering.State.State)
                   (w2 :: (Types.Sounds, Types.Sprites))
                   (w3 :: Types.GameState)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Graphics.UI.GLFW.Types.N:Window[0]) of ww { GHC.Ptr.Ptr ww1 ->
                 case w2 of ww2 { (,) ww3 ww4 ->
                 Rendering.$wrenderFrame ww1 w1 ww4 w3 w4 } }) -}
b902e19032d9dd2ba42fc44ab0fab4d0
  showDifficulty ::
    Types.Sprites
    -> Types.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(1*U(1*U(U),1*U(U)),U),1*U(1*U(1*U(U),1*U(U)),U),1*U(1*U(1*U(U),1*U(U)),U),1*U(1*U(1*U(U),1*U(U)),U))><S(LLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A)>m11,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Sprites) (w1 :: Types.GameState) ->
                 case w of ww { Types.Sprites ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ->
                 case w1 of ww32 { Types.GameState ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ww42 ww43 ww44 ->
                 case ww41 of wild {
                   Types.Easy
                   -> case ww28 of ww45 { Types.Sprite ww46 ww47 ->
                      case ww46 of wild1 { (,) sWidth sHeight ->
                      Graphics.Gloss.Internals.Data.Picture.Translate
                        (case sWidth of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        (case sHeight of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        ww47 } }
                   Types.Medium
                   -> case ww29 of ww45 { Types.Sprite ww46 ww47 ->
                      case ww46 of wild1 { (,) sWidth sHeight ->
                      Graphics.Gloss.Internals.Data.Picture.Translate
                        (case sWidth of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        (case sHeight of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        ww47 } }
                   Types.Hard
                   -> case ww30 of ww45 { Types.Sprite ww46 ww47 ->
                      case ww46 of wild1 { (,) sWidth sHeight ->
                      Graphics.Gloss.Internals.Data.Picture.Translate
                        (case sWidth of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        (case sHeight of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        ww47 } }
                   Types.Extreme
                   -> case ww31 of ww45 { Types.Sprite ww46 ww47 ->
                      case ww46 of wild1 { (,) sWidth sHeight ->
                      Graphics.Gloss.Internals.Data.Picture.Translate
                        (case sWidth of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        (case sHeight of wild2 { GHC.Types.F# x ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                        ww47 } } } } }) -}
099a8e103ffc3416a24b7216c57c5f0b
  showHearts ::
    Types.Sprites
    -> Types.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(1*U(1*U(U),1*U(U)),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A)>m14,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Sprites) (w1 :: Types.GameState) ->
                 case Rendering.$wshowHearts w w1 of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
ba98f5ff36ff64238883f874d4a35b09
  showPoints ::
    Types.Sprites
    -> Types.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),U(U,U),A,A,A,A)><L,1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A)>m14,
     Unfolding: InlineRule (2, True, False)
                (\ (sprites :: Types.Sprites) (state :: Types.GameState) ->
                 Rendering.number2Picture
                   sprites
                   (case state of wild { Types.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                    ds7 })) -}
fedafe8dd0d20b5c89076a39cbfbc7ce
  sprite2Picture ::
    Types.Sprite -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(1*U(U),1*U(U)),U)>m11,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Sprite) ->
                 case ds of wild { Types.Sprite ds1 sprite ->
                 case ds1 of wild1 { (,) sWidth sHeight ->
                 Graphics.Gloss.Internals.Data.Picture.Translate
                   (case sWidth of wild2 { GHC.Types.F# x ->
                    GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                   (case sHeight of wild2 { GHC.Types.F# x ->
                    GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                   sprite } }) -}
d45d473d6f1bc308455e7a20bef6de43
  spriteHeight :: Types.Sprite -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)L),1*U(1*U(A,1*U(U)),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Types.Sprite) ->
                 case ds of wild { Types.Sprite ds1 ds2 ->
                 case ds1 of wild1 { (,) ds3 height -> height } }) -}
cda15a1a14414ae1df5f77c83300dafb
  toDegrees :: GHC.Float.Floating a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LL)LLLLLLLLLLLLLLLLLLLLLL),U(1*U(1*U(A,A,1*C1(C1(U)),A,A,A,1*C1(U)),1*C1(C1(U)),A,A),1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (eta :: a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 GHC.Real./
                   @ a
                   $dFractional
                   (let {
                      $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                    } in
                    GHC.Num.*
                      @ a
                      $dNum
                      eta
                      (GHC.Num.fromInteger @ a $dNum Rendering.toDegrees1))
                   (GHC.Float.pi @ a $dFloating)) -}
a178632a1e314100cca1503db31f4fd8
  toDegrees1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (180) -}
5a812db9c6989ac5b12e2db68b6c9d5e
  translateHammer ::
    Types.GameState
    -> Graphics.Gloss.Internals.Data.Picture.Picture
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U),U(U)),A,U,A,A,A),A,U(U),A,A,A,A,A,A,A,A,A)><L,U>m11,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.GameState)
                   (w1 :: Graphics.Gloss.Internals.Data.Picture.Picture) ->
                 case Rendering.$wtranslateHammer w w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Graphics.Gloss.Internals.Data.Picture.Translate ww1 ww2 ww3 }) -}
486700ca3652b152b4b16cdb31bee689
  weebPictures ::
    Types.Sprites
    -> Types.GameState -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 2, Strictness: <L,A><L,1*U(A,U,A,A,A,A,A,A,A,A,A,A)>m14,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Types.Sprites) (w1 :: Types.GameState) ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures
                   (case w1 of wild { Types.GameState ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                    Rendering.weebPictures_go2
                      ds2
                      (GHC.Base.map
                         @ Types.Weeb
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         Rendering.weebPictures1
                         ds2) })) -}
f7318fe5d27d7e2a42cc79c43f6a7d05
  weebPictures1 ::
    Types.Weeb -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1,
     Strictness: <S(LS(LS)SLL),1*U(A,1*U(A,1*U),1*U,A,A)>m11,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Types.Weeb) ->
                 case w of ww { Types.Weeb ww1 ww2 ww3 ww4 ww5 ->
                 case ww2 of ww6 { (,) ww7 ww8 ->
                 case ww3 of wild { DEFAULT ->
                 case ww8 of wild1 {
                   []
                   -> case GHC.List.badHead
                      ret_ty Graphics.Gloss.Internals.Data.Picture.Picture
                      of {}
                   : x ds1
                   -> case x of wild2 { (,) x1 ds2 ->
                      case x1 of wild3 { Types.Sprite ds sprite ->
                      case ds of wild4 { (,) sWidth sHeight ->
                      Graphics.Gloss.Internals.Data.Picture.Translate
                        (case sWidth of wild5 { GHC.Types.F# x2 ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x2 2.0#) })
                        (case sHeight of wild5 { GHC.Types.F# x2 ->
                         GHC.Types.F# (GHC.Prim.divideFloat# x2 2.0#) })
                        sprite } } } } } } }) -}
3d0a5a386c1febf836460d8560754314
  weebPictures_go2 ::
    [Types.Weeb]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

